import React, { useState, useEffect } from "react";
import "../../assets/admin.css";
import axios from "axios";

const GenerateReports = () => {
  const [reportType, setReportType] = useState("daily");
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(false);
  const [message, setMessage] = useState("");

  const token = localStorage.getItem("token");

  // Fetch existing reports generated by this user
  useEffect(() => {
    const fetchReports = async () => {
      setLoading(true);
      try {
        const config = { headers: { Authorization: `Bearer ${token}` } };
        const response = await axios.get(
          "http://localhost:8000/api/reports",
          config
        );
        //console.log('Reports data:', response.data);
        setReports(response.data);
      } catch (err) {
        //console.error('Error fetching reports:', err);
        setMessage("Failed to fetch reports.");
      } finally {
        setLoading(false);
      }
    };

    fetchReports();
  }, [token]);

  // Generate a new report
  const handleGenerate = async () => {
    setLoading(true);
    try {
      const config = { headers: { Authorization: `Bearer ${token}` } };
      const response = await axios.post(
        "http://localhost:8000/api/reports",
        { report_type: reportType },
        config
      );
      console.log("Generated report:", response.data);
      setMessage("Report generated successfully.");

      // Refresh report list
      const reportsResponse = await axios.get(
        "http://localhost:8000/api/reports",
        config
      );
      setReports(reportsResponse.data);
    } catch (err) {
      //console.error('Error generating report:', err);
      setMessage("Failed to generate report.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 bg-white shadow rounded">
      <h2 className="text-xl font-bold mb-4">Generate Reports</h2>
      {message && <p className="mb-4 text-red-500">{message}</p>}

      <div className="flex gap-4 mb-6">
        <select
          value={reportType}
          onChange={(e) => setReportType(e.target.value)}
          className="border p-2 rounded"
        >
          <option value="daily">Daily</option>
          <option value="monthly">Monthly</option>
          <option value="yearly">Yearly</option>
        </select>
        <button
          onClick={handleGenerate}
          disabled={loading}
          className="bg-blue-600 text-white p-2 rounded hover:bg-blue-700"
        >
          {loading ? "Generating..." : "Generate Report"}
        </button>
      </div>

      <h3 className="text-lg font-semibold mb-2">Generated Reports</h3>
      {loading ? (
        <div className="spinner-container">
          <div className="spinner" aria-label="Loading reports" />
        </div>
      ) : (
        <table className="w-full border-collapse border reports-table compact striped">
          <thead>
            <tr className="bg-gray-200">
              <th className="border p-2">ID</th>
              <th className="border p-2">Type</th>
              <th className="border p-2">Generated By</th>
              <th className="border p-2">Role</th>
              <th className="border p-2">Generated At</th>
              <th className="border p-2">Actions</th>
            </tr>
          </thead>
          <tbody>
            {reports.length === 0 && (
              <tr>
                <td colSpan={6} className="text-center p-2">
                  No reports found.
                </td>
              </tr>
            )}
            {reports.map((report) => {
              // Check if generated_by is an object with user data
              const userData =
                report.generated_by && typeof report.generated_by === "object"
                  ? report.generated_by
                  : null;

              return (
                <tr key={report.id}>
                  <td className="border p-2">{report.id}</td>
                  <td className="border p-2">{report.report_type}</td>
                  <td className="border p-2">
                    {userData
                      ? userData.name
                      : `User ID: ${report.generated_by}`}
                  </td>
                  <td className="border p-2">
                    {userData ? userData.role : "N/A"}
                  </td>
                  <td className="border p-2">
                    {report.generated_at
                      ? new Date(report.generated_at).toLocaleString()
                      : "N/A"}
                  </td>
                  <td className="border p-2">
                    {report.file_path ? (
                      <a
                        href={`http://localhost:8000/${report.file_path}`}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-blue-600 underline"
                      >
                        Download
                      </a>
                    ) : (
                      "N/A"
                    )}
                  </td>
                </tr>
              );
            })}
          </tbody>
        </table>
      )}
    </div>
  );
};

export default GenerateReports;
