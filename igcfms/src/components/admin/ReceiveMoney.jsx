import React, { useState, useEffect } from "react";
import "../../assets/admin.css";
import "./css/receivemoney.css";
import axios from "axios";
import notificationService from '../../services/notificationService';
import balanceService from '../../services/balanceService';
import { broadcastFundTransaction } from '../../services/fundTransactionChannel';

const ReceiveMoney = () => {
  const [fundAccounts, setFundAccounts] = useState([]);
  const [recipientAccounts, setRecipientAccounts] = useState([]);
  const [amount, setAmount] = useState("");
  const [payerName, setPayerName] = useState("");
  const [receiptNo, setReceiptNo] = useState(""); // Will be auto-generated
  const [fundAccountId, setFundAccountId] = useState("");
  const [description, setDescription] = useState("");
  const [reference, setReference] = useState("");
  const [modeOfPayment, setModeOfPayment] = useState("Cash");
  const [message, setMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  
  // New states for recipient account selection
  const [useRecipientAccount, setUseRecipientAccount] = useState(false);
  const [selectedRecipientAccountId, setSelectedRecipientAccountId] = useState("");
  
  // Modal states
  const [showFundAccountModal, setShowFundAccountModal] = useState(false);
  const [showRecipientModal, setShowRecipientModal] = useState(false);
  const [fundAccountSearch, setFundAccountSearch] = useState("");
  const [recipientSearch, setRecipientSearch] = useState("");
  
  // Selected account details for display
  const [selectedFundAccount, setSelectedFundAccount] = useState(null);
  const [selectedRecipientAccount, setSelectedRecipientAccount] = useState(null);

  // Fetch fund accounts and recipient accounts
  useEffect(() => {
    const fetchFundAccounts = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://localhost:8000/api/fund-accounts', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        setFundAccounts(response.data);
      } catch (error) {
        console.error('Error fetching fund accounts:', error);
      }
    };

    const fetchRecipientAccounts = async () => {
      try {
        const token = localStorage.getItem('token');
        console.log('Fetching recipient accounts with URL: http://localhost:8000/api/recipient-accounts?status=active');
        
        const response = await axios.get('http://localhost:8000/api/recipient-accounts?status=active', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log('Recipient accounts API response:', response.data);
        console.log('Recipient accounts data:', response.data.data);
        console.log('Number of recipient accounts found:', (response.data.data || []).length);
        
        setRecipientAccounts(response.data.data || []);
      } catch (error) {
        console.error('Error fetching recipient accounts:', error);
        console.error('Error details:', error.response?.data);
      }
    };
    
    fetchFundAccounts();
    fetchRecipientAccounts();
  }, []);

  // Auto-generate receipt numbers when any input is filled
  const [referenceNo, setReferenceNo] = useState("");
  const [hasAutoGenerated, setHasAutoGenerated] = useState(false);

  // Function to generate receipt numbers
  const generateReceiptNumbers = () => {
    if (!hasAutoGenerated) {
      const today = new Date();
      const dateStr = today.toISOString().slice(0, 10).replace(/-/g, '');
      const randomNum = Math.floor(Math.random() * 9999).toString().padStart(4, '0');
      const year = today.getFullYear();
      const yearRandomNum = Math.floor(Math.random() * 9999).toString().padStart(4, '0');
      
      setReceiptNo(`RCPT-${dateStr}-${randomNum}`);
      setReferenceNo(`COL-${year}-${yearRandomNum}`);
      setHasAutoGenerated(true);
    }
  };

  // Watch for any input changes to trigger auto-generation
  useEffect(() => {
    if (amount || payerName || selectedRecipientAccountId || fundAccountId || reference || description) {
      generateReceiptNumbers();
    }
  }, [amount, payerName, selectedRecipientAccountId, fundAccountId, reference, description, hasAutoGenerated]);

  // Validation function
  const validateForm = () => {
    const newErrors = {};
    
    if (!amount || parseFloat(amount) <= 0) {
      newErrors.amount = "Amount is required and must be greater than 0";
    }
    
    if (!useRecipientAccount && !payerName.trim()) {
      newErrors.payerName = "Payer name is required";
    }
    
    if (useRecipientAccount && !selectedRecipientAccountId) {
      newErrors.recipientAccount = "Please select a recipient account";
    }
    
    if (!fundAccountId) {
      newErrors.fundAccount = "Please select a fund account";
    }
    
    if (!modeOfPayment) {
      newErrors.modeOfPayment = "Payment mode is required";
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // Clear specific error when user starts typing
  const clearError = (field) => {
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: undefined }));
    }
  };

  // Handle fund account selection
  const handleFundAccountSelect = (account) => {
    setSelectedFundAccount(account);
    setFundAccountId(account.id.toString());
    setShowFundAccountModal(false);
    clearError('fundAccount');
  };

  // Handle recipient account selection
  const handleRecipientAccountSelect = (account) => {
    setSelectedRecipientAccount(account);
    setSelectedRecipientAccountId(account.id.toString());
    setShowRecipientModal(false);
    clearError('recipientAccount');
  };

  // Filter accounts based on search
  const filteredFundAccounts = fundAccounts.filter(account =>
    account.name.toLowerCase().includes(fundAccountSearch.toLowerCase()) ||
    account.code.toLowerCase().includes(fundAccountSearch.toLowerCase())
  );

  const filteredRecipientAccounts = recipientAccounts.filter(account =>
    account.name.toLowerCase().includes(recipientSearch.toLowerCase()) ||
    (account.contact_person && account.contact_person.toLowerCase().includes(recipientSearch.toLowerCase()))
  );

  // Reset form
  const resetForm = () => {
    setAmount("");
    setPayerName("");
    setDescription("");
    setReference("");
    setModeOfPayment("Cash");
    setUseRecipientAccount(false);
    setSelectedRecipientAccountId("");
    setSelectedFundAccount(null);
    setSelectedRecipientAccount(null);
    setFundAccountId("");
    setErrors({});
    setMessage("");
    setSuccessMessage("");
    setReceiptNo("");
    setReferenceNo("");
    setHasAutoGenerated(false);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validate form
    if (!validateForm()) {
      return;
    }
    
    setLoading(true);
    setMessage("");
    setSuccessMessage("");
    
    // Determine payer name based on selection method
    let finalPayerName = "";
    let recipientAccountId = null;
    
    if (useRecipientAccount && selectedRecipientAccountId) {
      const selectedRecipient = recipientAccounts.find(acc => acc.id === parseInt(selectedRecipientAccountId));
      finalPayerName = selectedRecipient ? selectedRecipient.name : "";
      recipientAccountId = parseInt(selectedRecipientAccountId);
    } else {
      finalPayerName = payerName.trim();
    }
    
    try {
      const token = localStorage.getItem('token');
      const transactionData = {
        type: "Collection",
        amount: parseFloat(amount),
        description: description.trim() || null,
        recipient: finalPayerName,
        department: "General", // Default value since field is required
        category: "Revenue Collection", // Default value since field is required
        reference: reference.trim() || null,
        fund_account_id: fundAccountId ? parseInt(fundAccountId) : null,
        mode_of_payment: modeOfPayment,
        payer_name: finalPayerName,
      };
      
      // Add recipient account ID if selected
      if (recipientAccountId) {
        transactionData.recipient_account_id = recipientAccountId;
      }
      
      const response = await axios.post('http://localhost:8000/api/transactions', transactionData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const responseData = response.data.data;
      
      // Get fund account details for notifications
      const selectedFund = fundAccounts.find(fund => fund.id === parseInt(fundAccountId));
      
      // Process transaction and update balance
      try {
        const processed = await balanceService.processTransaction('RECEIVE_MONEY', {
          fund_account_id: parseInt(fundAccountId),
          amount: parseFloat(amount),
          payer: finalPayerName,
          fund_account_name: selectedFund?.name || `Fund Account #${fundAccountId}`,
          transaction_id: responseData.id || responseData.transaction_id,
          receipt_no: responseData.receipt_no
        });

        broadcastFundTransaction({
          accountId: parseInt(fundAccountId),
          type: 'collection',
          amount: parseFloat(amount),
          source: 'ReceiveMoney',
          balance: processed?.newBalance,
        });
      } catch (balanceError) {
        console.error('Balance update error:', balanceError);
        // Continue even if balance update fails
      }

      setSuccessMessage(`Collection recorded successfully! Receipt No: ${responseData.receipt_no}, Reference No: ${responseData.reference_no}`);
      
      // Reset form after short delay to show success message
      setTimeout(() => {
        resetForm();
      }, 3000);
      
    } catch (error) {
      console.error('Error creating transaction:', error);
      setMessage(error.response?.data?.message || 'Error creating transaction');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="receive-money-container">
      <div className="receive-money-form">
        {/* Header */}
        <div className="form-header">
          <h2><i className="fas fa-money-bill-wave"></i> Receive Money</h2>
          <p>Record incoming payments and collections</p>
        </div>

        {/* Success/Error Messages */}
        {successMessage && (
          <div className="alert alert-success">
            <i className="fas fa-check-circle"></i>
            {successMessage}
          </div>
        )}
        {message && (
          <div className="alert alert-error">
            <i className="fas fa-exclamation-triangle"></i>
            {message}
          </div>
        )}

        <form onSubmit={handleSubmit} className="enhanced-form">
          {/* Left Column - Receipt Information & Fund Assignment */}
          <div className="form-section left-column">
            {/* Receipt Information */}
            <div className="section-header">
              <h5><i className="fas fa-receipt"></i> Receipt Information</h5>
            </div>
            
            <div className="form-row">
              <div className="form-group">
                <label>Receipt Number</label>
                <div className="input-with-tooltip">
                  <input
                    type="text"
                    value={receiptNo || "Will auto-generate when form is filled"}
                    disabled
                    className="auto-generated-field"
                  />
                  <i className="fas fa-info-circle tooltip-icon" title="Auto-generated by the system for tracking"></i>
                </div>
              </div>
              
              <div className="form-group">
                <label>Reference Number</label>
                <div className="input-with-tooltip">
                  <input
                    type="text"
                    value={referenceNo || "Will auto-generate when form is filled"}
                    disabled
                    className="auto-generated-field"
                  />
                  <i className="fas fa-info-circle tooltip-icon" title="Auto-generated collection reference"></i>
                </div>
              </div>
            </div>
              {/* Payer Selection Toggle */}
            <div className="toggle-section">
              <label className="toggle-label">
                <input
                  type="checkbox"
                  checked={useRecipientAccount}
                  onChange={(e) => {
                    setUseRecipientAccount(e.target.checked);
                    if (e.target.checked) {
                      setPayerName("");
                      clearError('payerName');
                    } else {
                      setSelectedRecipientAccountId("");
                      setSelectedRecipientAccount(null);
                      clearError('recipientAccount');
                    }
                  }}
                  className="toggle-checkbox"
                />
                <span className="toggle-slider"></span>
                <span className="toggle-text">Use Recipient Account</span>
              </label>
              <p className="toggle-help">
                {useRecipientAccount 
                  ? "Select from existing recipient accounts" 
                  : "Manually enter payer's full name"}
              </p>
            </div>
  
            
            

            {/* Payer Input */}
            {useRecipientAccount ? (
              <div className="form-group">
                <label>Recipient Account</label>
                <div className="selector-input" onClick={() => setShowRecipientModal(true)}>
                  <span className={selectedRecipientAccount ? "selected" : "placeholder"}>
                    {selectedRecipientAccount 
                      ? `${selectedRecipientAccount.name} - ${selectedRecipientAccount.contact_person}` 
                      : "Click to select recipient account"}
                  </span>
                  <i className="fas fa-chevron-down"></i>
                </div>
                {errors.recipientAccount && <span className="error-text">{errors.recipientAccount}</span>}
              </div>
            ) : (
              <div className="form-group">
                <label>Payer Name</label>
                <input
                  type="text"
                  placeholder="Enter payer's full name"
                  value={payerName}
                  onChange={(e) => {
                    setPayerName(e.target.value);
                    clearError('payerName');
                  }}
                  className={errors.payerName ? "error" : ""}
                />
                {errors.payerName && <span className="error-text">{errors.payerName}</span>}
              </div>
            )}
            
            <div className="form-group">
              <label>Fund Account <span className="required">*</span></label>
              <div className="selector-input" onClick={() => setShowFundAccountModal(true)}>
                <span className={selectedFundAccount ? "selected" : "placeholder"}>
                  {selectedFundAccount 
                    ? `${selectedFundAccount.name} (${selectedFundAccount.code}) - ${selectedFundAccount.account_type}` 
                    : "Click to select fund account"}
                </span>
                <i className="fas fa-chevron-down"></i>
              </div>
              {errors.fundAccount && <span className="error-text">{errors.fundAccount}</span>}
            </div>
          </div>

          {/* Right Column - Transaction Details */}
          <div className="form-section right-column">
            {/* Payer Information at TOP */}
         

            {/* Transaction Details */}
            <div className="subsection-header">
              <h6><i className="fas fa-coins"></i> Transaction Details</h6>
            </div>
            
            <div className="form-row">
              <div className="form-group">
                <label className="amount-label">Amount <span className="required">*</span></label>
                <input
                  type="number"
                  placeholder="0.00"
                  value={amount}
                  onChange={(e) => {
                    setAmount(e.target.value);
                    clearError('amount');
                  }}
                  className={`amount-input ${errors.amount ? "error" : ""}`}
                  min="0.01"
                  step="0.01"
                />
                {errors.amount && <span className="error-text">{errors.amount}</span>}
              </div>
              
              <div className="form-group">
                <label>Payment Mode</label>
                <select
                  value={modeOfPayment}
                  onChange={(e) => {
                    setModeOfPayment(e.target.value);
                    clearError('modeOfPayment');
                  }}
                  className={errors.modeOfPayment ? "error" : ""}
                >
                  <option value="Cash">Cash</option>
                  <option value="Cheque">Cheque</option>
                  <option value="Bank Transfer">Bank Transfer</option>
                  <option value="Online Payment">Online Payment</option>
                </select>
                {errors.modeOfPayment && <span className="error-text">{errors.modeOfPayment}</span>}
              </div>
            </div>

            <div className="form-group">
              <label>Reference (Optional)</label>
              <input
                type="text"
                placeholder="Enter reference number or details"
                value={reference}
                onChange={(e) => setReference(e.target.value)}
              />
            </div>

            <div className="form-group">
              <label>Description (Optional)</label>
              <textarea
                placeholder="Enter transaction description or notes"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows="3"
              />
            </div>
          </div>

          {/* Form Actions */}
          <div className="form-actions">
            <button
              type="button"
              onClick={resetForm}
              className="btn-secondary"
              disabled={loading}
            >
              <i className="fas fa-undo"></i>
              Reset
            </button>
            
            <button
              type="submit"
              className="btn-primary"
              disabled={loading}
            >
              {loading ? (
                <>
                  <i className="fas fa-spinner fa-spin"></i>
                  Processing...
                </>
              ) : (
                <>
                  <i className="fas fa-plus-circle"></i>
                  Create Collection Transaction
                </>
              )}
            </button>
          </div>
        </form>
      </div>

      {/* Fund Account Selection Modal */}
      {showFundAccountModal && (
        <div className="modal-overlay" onClick={() => setShowFundAccountModal(false)}>
          <div className="modal account-selector-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h4><i className="fas fa-university"></i> Select Fund Account</h4>
              <button 
                className="close-button" 
                onClick={() => setShowFundAccountModal(false)}
              >
                ×
              </button>
            </div>
            
            <div className="modal-body">
              <div className="search-bar">
                <i className="fas fa-search"></i>
                <input
                  type="text"
                  placeholder="Search by account name or code..."
                  value={fundAccountSearch}
                  onChange={(e) => setFundAccountSearch(e.target.value)}
                />
              </div>
              
              <div className="accounts-grid">
                {filteredFundAccounts.length === 0 ? (
                  <div className="no-results">
                    <i className="fas fa-search"></i>
                    <p>No fund accounts found</p>
                  </div>
                ) : (
                  filteredFundAccounts.map((account) => (
                    <div
                      key={account.id}
                      className="account-card"
                      onClick={() => handleFundAccountSelect(account)}
                    >
                      <div className="account-info">
                        <h6>{account.name}</h6>
                        <p className="account-code">{account.code}</p>
                        <p className="account-type">{account.account_type}</p>
                        <p className="account-balance">Balance: ₱{parseFloat(account.balance || 0).toLocaleString()}</p>
                      </div>
                      <i className="fas fa-chevron-right"></i>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Recipient Account Selection Modal */}
      {showRecipientModal && (
        <div className="modal-overlay" onClick={() => setShowRecipientModal(false)}>
          <div className="modal account-selector-modal" onClick={(e) => e.stopPropagation()}>
            <div className="modal-header">
              <h4><i className="fas fa-users"></i> Select Recipient Account</h4>
              <button 
                className="close-button" 
                onClick={() => setShowRecipientModal(false)}
              >
                ×
              </button>
            </div>
            
            <div className="modal-body">
              <div className="search-bar">
                <i className="fas fa-search"></i>
                <input
                  type="text"
                  placeholder="Search by name or contact person..."
                  value={recipientSearch}
                  onChange={(e) => setRecipientSearch(e.target.value)}
                />
              </div>
              
              <div className="accounts-grid">
                {filteredRecipientAccounts.length === 0 ? (
                  <div className="no-results">
                    <i className="fas fa-search"></i>
                    <p>No recipient accounts found</p>
                  </div>
                ) : (
                  filteredRecipientAccounts.map((account) => (
                    <div
                      key={account.id}
                      className="account-card"
                      onClick={() => handleRecipientAccountSelect(account)}
                    >
                      <div className="account-info">
                        <h6>{account.name}</h6>
                        <p className="contact-person">{account.contact_person}</p>
                        <p className="fund-code">{account.fund_code || 'No Fund Code'}</p>
                      </div>
                      <i className="fas fa-chevron-right"></i>
                    </div>
                  ))
                )}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ReceiveMoney;
