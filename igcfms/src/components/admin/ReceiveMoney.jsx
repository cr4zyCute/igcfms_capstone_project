import React, { useState, useEffect } from "react";
import "../../assets/admin.css";
import axios from "axios";

const ReceiveMoney = () => {
  const [fundAccounts, setFundAccounts] = useState([]);
  const [amount, setAmount] = useState("");
  const [payerName, setPayerName] = useState("");
  const [receiptNo, setReceiptNo] = useState(""); // Will be auto-generated
  const [fundAccountId, setFundAccountId] = useState("");
  const [description, setDescription] = useState("");
  // Removed department and category as requested
  const [reference, setReference] = useState("");
  const [modeOfPayment, setModeOfPayment] = useState("Cash");
  const [message, setMessage] = useState("");

  // Fetch fund accounts
  useEffect(() => {
    const fetchFundAccounts = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://localhost:8000/api/fund-accounts', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        setFundAccounts(response.data);
      } catch (error) {
        console.error('Error fetching fund accounts:', error);
      }
    };
    
    fetchFundAccounts();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post('http://localhost:8000/api/transactions', {
        type: "Collection",
        amount: parseFloat(amount),
        description: description.trim() || null,
        recipient: payerName.trim(),
        department: "General", // Default value since field is required
        category: "Revenue Collection", // Default value since field is required
        reference: reference.trim() || null,
        fund_account_id: fundAccountId ? parseInt(fundAccountId) : null,
        mode_of_payment: modeOfPayment,
        // Backend validation fields
        payer_name: payerName.trim(),
        // Receipt number will be auto-generated by backend
      }, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const transactionData = response.data.data;
      setMessage(`Collection transaction created successfully! Receipt No: ${transactionData.receipt_no}, Reference No: ${transactionData.reference_no}`);
      
      // Reset form
      setAmount("");
      setPayerName("");
      setReceiptNo("");
      setFundAccountId("");
      setDescription("");
     // setDepartment("");
      //setCategory("");
      setReference("");
      setModeOfPayment("Cash");
      
    } catch (error) {
      console.error('Error creating transaction:', error);
      setMessage(error.response?.data?.message || 'Error creating transaction');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 bg-white rounded shadow">
      <h2 className="text-lg font-bold mb-4">Receive Money / Issue Receipt</h2>
      {message && <p className="mb-2 text-red-600">{message}</p>}

      <input
        placeholder="Payer Name"
        value={payerName}
        onChange={(e) => setPayerName(e.target.value)}
        className="border p-2 w-full mb-2"
        required
      />
      <div className="border p-2 w-full mb-2 bg-gray-100 text-gray-600">
        Receipt Number: Will be auto-generated (RCPT-YYYYMMDD-####)
      </div>
      <div className="border p-2 w-full mb-2 bg-gray-100 text-gray-600">
        Reference Number: Will be auto-generated (COL-YYYY-####)
      </div>
      <input
        type="number"
        placeholder="Amount"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        className="border p-2 w-full mb-2"
        min="0.01"
        step="0.01"
        required
      />

      {/* Department and Category removed as requested - using default values in backend */}

      <input
        placeholder="Reference (optional)"
        value={reference}
        onChange={(e) => setReference(e.target.value)}
        className="border p-2 w-full mb-2"
      />

      <select
        value={modeOfPayment}
        onChange={(e) => setModeOfPayment(e.target.value)}
        className="border p-2 w-full mb-2"
        required
      >
        <option value="Cash">Cash</option>
        <option value="Cheque">Cheque</option>
        <option value="Bank Transfer">Bank Transfer</option>
      </select>

      <textarea
        placeholder="Description (optional)"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        className="border p-2 w-full mb-2"
        rows="3"
      />

      <select
        value={fundAccountId}
        onChange={(e) => setFundAccountId(e.target.value)}
        className="border p-2 w-full mb-2"
        required
      >
        <option value="">-- Select Fund Account --</option>
        {fundAccounts.map((acc) => (
          <option key={acc.id} value={acc.id}>
            {acc.name} ({acc.code}) - {acc.account_type}
          </option>
        ))}
      </select>

      <button className="bg-blue-600 text-white p-2 rounded">
        Create Collection Transaction
      </button>
    </form>
  );
};

export default ReceiveMoney;
