import React, { useState, useEffect } from "react";
import "../../assets/admin.css";
import axios from "axios";
import notificationService from "../../services/notificationService";
import balanceService from "../../services/balanceService";

const ReceiveMoney = () => {
  const [fundAccounts, setFundAccounts] = useState([]);
  const [recipientAccounts, setRecipientAccounts] = useState([]);
  const [amount, setAmount] = useState("");
  const [payerName, setPayerName] = useState("");
  const [receiptNo, setReceiptNo] = useState(""); // Will be auto-generated
  const [fundAccountId, setFundAccountId] = useState("");
  const [description, setDescription] = useState("");
  // Removed department and category as requested
  const [reference, setReference] = useState("");
  const [modeOfPayment, setModeOfPayment] = useState("Cash");
  const [message, setMessage] = useState("");
  
  // New states for recipient account selection
  const [useRecipientAccount, setUseRecipientAccount] = useState(false);
  const [selectedRecipientAccountId, setSelectedRecipientAccountId] = useState("");

  // Fetch fund accounts and recipient accounts
  useEffect(() => {
    const fetchFundAccounts = async () => {
      try {
        const token = localStorage.getItem('token');
        const response = await axios.get('http://localhost:8000/api/fund-accounts', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        setFundAccounts(response.data);
      } catch (error) {
        console.error('Error fetching fund accounts:', error);
      }
    };

    const fetchRecipientAccounts = async () => {
      try {
        const token = localStorage.getItem('token');
        console.log('Fetching recipient accounts with URL: http://localhost:8000/api/recipient-accounts?status=active');
        
        const response = await axios.get('http://localhost:8000/api/recipient-accounts?status=active', {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        });
        
        console.log('Recipient accounts API response:', response.data);
        console.log('Recipient accounts data:', response.data.data);
        console.log('Number of recipient accounts found:', (response.data.data || []).length);
        
        setRecipientAccounts(response.data.data || []);
      } catch (error) {
        console.error('Error fetching recipient accounts:', error);
        console.error('Error details:', error.response?.data);
      }
    };
    
    fetchFundAccounts();
    fetchRecipientAccounts();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Determine payer name based on selection method
    let finalPayerName = "";
    let recipientAccountId = null;
    
    if (useRecipientAccount && selectedRecipientAccountId) {
      const selectedRecipient = recipientAccounts.find(acc => acc.id === parseInt(selectedRecipientAccountId));
      finalPayerName = selectedRecipient ? selectedRecipient.name : "";
      recipientAccountId = parseInt(selectedRecipientAccountId);
    } else {
      finalPayerName = payerName.trim();
    }
    
    if (!finalPayerName) {
      setMessage("Please select a recipient account or enter a payer name");
      return;
    }
    
    try {
      const token = localStorage.getItem('token');
      const transactionData = {
        type: "Collection",
        amount: parseFloat(amount),
        description: description.trim() || null,
        recipient: finalPayerName,
        department: "General", // Default value since field is required
        category: "Revenue Collection", // Default value since field is required
        reference: reference.trim() || null,
        fund_account_id: fundAccountId ? parseInt(fundAccountId) : null,
        mode_of_payment: modeOfPayment,
        // Backend validation fields
        payer_name: finalPayerName,
        // Receipt number will be auto-generated by backend
      };
      
      // Add recipient account ID if selected
      if (recipientAccountId) {
        transactionData.recipient_account_id = recipientAccountId;
      }
      
      const response = await axios.post('http://localhost:8000/api/transactions', transactionData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      const responseData = response.data.data;
      
      // Get fund account details for notifications
      const selectedFund = fundAccounts.find(fund => fund.id === parseInt(fundAccountId));
      
      // Process transaction and update balance
      try {
        await balanceService.processTransaction('RECEIVE_MONEY', {
          fund_account_id: parseInt(fundAccountId),
          amount: parseFloat(amount),
          payer: finalPayerName,
          fund_account_name: selectedFund?.name || `Fund Account #${fundAccountId}`,
          transaction_id: responseData.id || responseData.transaction_id,
          receipt_no: responseData.receipt_no
        });
      } catch (balanceError) {
        console.error('Balance update error:', balanceError);
        // Continue even if balance update fails
      }

      setMessage(`Collection transaction created successfully! Receipt No: ${responseData.receipt_no}, Reference No: ${responseData.reference_no}`);
      
      // Reset form
      setAmount("");
      setPayerName("");
      setReceiptNo("");
      setFundAccountId("");
      setDescription("");
      setReference("");
      setModeOfPayment("Cash");
      setUseRecipientAccount(false);
      setSelectedRecipientAccountId("");
      
    } catch (error) {
      console.error('Error creating transaction:', error);
      setMessage(error.response?.data?.message || 'Error creating transaction');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="p-4 bg-white rounded shadow">
      <h2 className="text-lg font-bold mb-4">Receive Money</h2>
      {message && <p className="mb-2 text-red-600">{message}</p>}

      {/* Toggle between recipient account and manual payer name */}
      <div className="mb-4 p-3 border rounded bg-gray-50">
        <label className="flex items-center mb-2">
          <input
            type="checkbox"
            checked={useRecipientAccount}
            onChange={(e) => {
              setUseRecipientAccount(e.target.checked);
              if (e.target.checked) {
                setPayerName(""); // Clear manual input when switching to recipient account
              } else {
                setSelectedRecipientAccountId(""); // Clear recipient selection when switching to manual
              }
            }}
            className="mr-2"
          />
          <span className="text-sm font-medium">Use Recipient Account</span>
        </label>
        <p className="text-xs text-gray-600">
          {useRecipientAccount 
            ? "Select from existing recipient accounts" 
            : "Manually enter payer name"}
        </p>
      </div>

      {/* Conditional input based on toggle */}
      {useRecipientAccount ? (
        <select
          value={selectedRecipientAccountId}
          onChange={(e) => setSelectedRecipientAccountId(e.target.value)}
          className="border p-2 w-full mb-2"
          required
        >
          <option value="">-- Select Recipient Account ({recipientAccounts.length} available) --</option>
          {recipientAccounts.length === 0 ? (
            <option value="" disabled>No recipient accounts found</option>
          ) : (
            recipientAccounts.map((acc) => (
              <option key={acc.id} value={acc.id}>
                {acc.name} - {acc.contact_person} ({acc.fund_code || 'No Fund Code'})
              </option>
            ))
          )}
        </select>
      ) : (
        <input
          placeholder="Payer Name"
          value={payerName}
          onChange={(e) => setPayerName(e.target.value)}
          className="border p-2 w-full mb-2"
          required
        />
      )}
      <div className="border p-2 w-full mb-2 bg-gray-100 text-gray-600">
        Receipt Number: Will be auto-generated (RCPT-YYYYMMDD-####)
      </div>
      <div className="border p-2 w-full mb-2 bg-gray-100 text-gray-600">
        Reference Number: Will be auto-generated (COL-YYYY-####)
      </div>
      <input
        type="number"
        placeholder="Amount"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        className="border p-2 w-full mb-2"
        min="0.01"
        step="0.01"
        required
      />

      {/* Department and Category removed as requested - using default values in backend */}

      <input
        placeholder="Reference (optional)"
        value={reference}
        onChange={(e) => setReference(e.target.value)}
        className="border p-2 w-full mb-2"
      />

      <select
        value={modeOfPayment}
        onChange={(e) => setModeOfPayment(e.target.value)}
        className="border p-2 w-full mb-2"
        required
      >
        <option value="Cash">Cash</option>
        <option value="Cheque">Cheque</option>
        <option value="Bank Transfer">Bank Transfer</option>
      </select>

      <textarea
        placeholder="Description (optional)"
        value={description}
        onChange={(e) => setDescription(e.target.value)}
        className="border p-2 w-full mb-2"
        rows="3"
      />

      <select
        value={fundAccountId}
        onChange={(e) => setFundAccountId(e.target.value)}
        className="border p-2 w-full mb-2"
        required
      >
        <option value="">-- Select Fund Account --</option>
        {fundAccounts.map((acc) => (
          <option key={acc.id} value={acc.id}>
            {acc.name} ({acc.code}) - {acc.account_type}
          </option>
        ))}
      </select>

      <button className="bg-blue-600 text-white p-2 rounded">
        Create Collection Transaction
      </button>
    </form>
  );
};

export default ReceiveMoney;
