import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

const normalizeAmount = (value) => {
  if (value === null || value === undefined) {
    return null;
  }

  if (typeof value === 'number') {
    return Number.isNaN(value) ? null : value;
  }

  if (typeof value === 'string') {
    const cleaned = value.replace(/[^0-9.-]/g, '');
    if (!cleaned.trim()) {
      return null;
    }
    const parsed = parseFloat(cleaned);
    return Number.isNaN(parsed) ? null : parsed;
  }

  return null;
};

const formatCurrency = (value) => {
  const amount = normalizeAmount(value);
  if (amount === null) {
    return '—';
  }
  const formatted = amount.toLocaleString('en-PH', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  });
  return `${amount < 0 ? '-' : ''}PHP ${Math.abs(amount).toLocaleString('en-PH', {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  })}`;
};

const formatDate = (value) => {
  if (!value) return '—';
  try {
    return new Intl.DateTimeFormat('en-PH', {
      year: 'numeric',
      month: 'short',
      day: '2-digit',
    }).format(new Date(value));
  } catch (error) {
    return value;
  }
};

export const generateIssuedReceiptsPDF = ({
  filters = {},
  receipts = [],
  summary = {},
  generatedBy = 'System',
  reportTitle = 'Issued Receipts Report',
}) => {
  const doc = new jsPDF({ orientation: 'landscape' });

  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 14;
  const centerX = pageWidth / 2;

  const addHeader = () => {
    doc.setFont('helvetica', 'bold');
    doc.setFontSize(16);
    doc.text(reportTitle, centerX, 18, { align: 'center' });

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.text(`Generated on: ${formatDate(new Date().toISOString())}`, centerX, 26, { align: 'center' });
    doc.text(`Generated by: ${generatedBy}`, centerX, 32, { align: 'center' });
  };

  const addFilters = () => {
    const filterEntries = Object.entries(filters)
      .filter(([, value]) => value !== undefined && value !== null && value !== '')
      .map(([key, value]) => `${key}: ${value}`);

    if (filterEntries.length === 0) return;

    doc.setFontSize(11);
    doc.text('Applied Filters:', margin, 40);
    doc.setFontSize(10);

    const chunkSize = 3;
    filterEntries.forEach((entry, index) => {
      const row = Math.floor(index / chunkSize);
      const col = index % chunkSize;
      const x = margin + col * 60;
      const y = 46 + row * 6;
      doc.text(`• ${entry}`, x, y);
    });
  };

  const addSummary = () => {
    const summaryRows = [
      ['Total Receipts', summary.totalReceipts ?? receipts.length],
      ['Total Amount', formatCurrency(summary.totalAmount ?? 0)],
      ['Average Amount', formatCurrency(summary.averageAmount ?? 0)],
    ];

    autoTable(doc, {
      startY: 60,
      head: [['Metric', 'Value']],
      body: summaryRows,
      styles: { fontSize: 10 },
      headStyles: { fillColor: [0, 0, 0], textColor: 255 },
      columnStyles: {
        0: { cellWidth: 60 },
        1: { cellWidth: 60 },
      },
      margin: { left: margin, right: margin },
    });
  };

  const addReceiptsTable = () => {
    if (!receipts.length) {
      doc.setFontSize(12);
      doc.text('No receipts found for the selected filters.', margin, doc.lastAutoTable.finalY + 16 || 90);
      return;
    }

    const tableBody = receipts.map((receipt, index) => ([
      String(index + 1),
      receipt.receipt_number || receipt.receiptNo || '—',
      formatDate(receipt.issue_date || receipt.dateIssued),
      receipt.payor || receipt.payer || '—',
      formatCurrency(receipt.amount),
      receipt.payment_method || receipt.paymentMethod || '—',
      receipt.cashier || receipt.issuedBy || '—',
      receipt.status || 'Issued',
    ]));

    autoTable(doc, {
      startY: doc.lastAutoTable?.finalY ? doc.lastAutoTable.finalY + 14 : 90,
      head: [[
        '#',
        'Receipt No.',
        'Issue Date',
        'Payor',
        'Amount',
        'Payment Method',
        'Issued By',
        'Status',
      ]],
      body: tableBody,
      styles: { fontSize: 9 },
      headStyles: { fillColor: [0, 0, 0], textColor: 255 },
      margin: { left: margin, right: margin },
      didDrawPage: (data) => {
        const pageNumber = doc.internal.getNumberOfPages();
        doc.setFontSize(9);
        doc.text(`Page ${data.pageNumber} of ${pageNumber}`, centerX, doc.internal.pageSize.getHeight() - 10, { align: 'center' });
      },
      willDrawCell: (data) => {
        if (data.row.section === 'body' && data.column.index === 4) {
          data.cell.text = [formatCurrency(data.cell.raw)];
        }
      },
      pageBreak: 'auto',
    });
  };

  addHeader();
  addFilters();
  addSummary();
  addReceiptsTable();

  doc.save(`${reportTitle.replace(/\s+/g, '_').toLowerCase()}_${Date.now()}.pdf`);
};

export default generateIssuedReceiptsPDF;
